#!/bin/bash
## SQL Script Assembler (SSAsm)
##
## This utility will scan through subdirectories looking for database scripts (fragments) to assemble into a 
## master build script. The master script will be built with appropriate headers for formatting/readability purposes 
## (editable in ssasm-header.txt) and will incorporate:
##      * The name of script where the fragment originated
##      * Pause points (editable in the ssasm-footer.txt file) between each script fragment for review purposes 
##      * Spool commmands to output each fragment executed in /tmp/ss_{SCHEMA_NAME}{N}.txt (N starting at 1) for review, etc.
##
## The latest availble version can be found at: https://github.com/cryptoknows/ssasm
##
## ---------------------------------------------------------------------------------------------------------------------
##
##
## Synopsis:
##
## ssasm [-d database_type] [-s schema_name] [-f file_type] path
##
##
## Options:
##
## -d   - database_type - The DB / client platform the assembled script will be executed against. Accepted values:
##                        oracle (default), mysql
##
## -s   - schema_name   - The name of schema (embedded in the folder names) to process. Case sensitive
##
## -f   - file_type     - The file type (suffix) to assemble (default is ".sql" (minus the quotes)). Case insensitive
##
## ---------------------------------------------------------------------------------------------------------------------
##
## SSAsm assumes that all changes are organized in directories with the following format:
##
## YYYY-MM-DD-<SCHEMA NAME>-<COMMENTS>
## 
## For example:
##
## 2016-01-02-MY_SCHEMA-                        -- No secondary comment added
## 2016-01-05-MY_SCHEMA-Modified_Version        -- Comments added
##
## NOTES:
##
## * SSAsm will assemble scripts by folder date and then by alphanumeric sort order of each script *within* the folder
## * SSAsm will *ignore* any directories / scripts placed within a "Rejected" folder (case sensitive)
##
## ---------------------------------------------------------------------------------------------------------------------
##
## Copyright (C) Roby Sherman and other contributors as noted in this section below:
##
## 
## ---------------------------------------------------------------------------------------------------------------------
##
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation; either version 2
## of the License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
##
##

VERSION=2.0.1
CTR=1
INTERNAL_PATH=`dirname $0`
DATABASE="oracle"
FTYPE=""
 
while getopts "d:s:f:" opt; do
  case $opt in
    s) SCHEMA=$OPTARG
        ;; 
    f) FTYPE=$OPTARG
        ;; 
    d)
      if [ "$OPTARG" != "oracle" ] && [ "$OPTARG" != "mysql" ]
      then
        echo "Sorry, '${OPTARG}' isn't a recognized database target!"
        exit 1
      else 
        DATABASE=$OPTARG
      fi
        ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

if [ "$1" ] 
then
        SOURCE_DIR="${1}"
else
        SOURCE_DIR="."
fi

## ------------------------------------------------------------------------------------------

echo ""
echo ""
echo "SQL Script Assembler (SSAsm) ${VERSION}"
echo ""
echo "This is a copyrighted utility, distributed under GPL v2 license."
echo "Refer to the SSAsm source directory for more information."
echo
if [ ${SCHEMA} ]
then
        echo "Schema Specified:         '${SCHEMA}'"
else
        echo -n ">>Enter a schema name to build: "
        read SCHEMA
        if [ ! ${SCHEMA} ]
        then
                echo "*** ERROR! *** You must provide a schema name!"
                exit
        fi
        echo
        echo
fi


echo "Target DB Platform:       '${DATABASE}'"
if [ ${FTYPE} ] 
then
        echo "Filetype Specified:       '${FTYPE}'"
else
        echo; echo; echo;
        echo -n ">>Enter a filetype to integrate (case insensitive): [.sql]: "
        read FTYPE
        if [ ! ${FTYPE} ]
        then
                FTYPE=".sql"
        fi
        echo; echo;
fi
echo "Path to Process:  '${SOURCE_DIR}'"
echo ""
echo ""
OFILE="build_${SCHEMA}${FTYPE}"
echo "### GENERATING THE MASTER BUILD SCRIPT \"${OFILE}\" FROM THE FOLLOWING FILES: "
echo ""
find $SOURCE_DIR -name "Rejected" -prune -o -print | grep "\-${SCHEMA}\-" | grep -i ${FTYPE} 
echo ""
echo ""
echo -n ">>Proceed? [N]: "
read READY
if [ "$READY" = "Y" ] || [ "$READY" = "y" ]
then
        tput clear
        echo ""
        echo "### GENERATING..."
        echo "###"
        echo "-- The following script was generated by the SQL Script Assembler (SSAsm) V${VERSION}" >$OFILE
        echo "-- Get your copy today at https://github.com/cryptoknows/ssasm" >>$OFILE
        echo "--">>$OFILE
        echo "--">>$OFILE

        case ${DATABASE} in
                oracle)
                        echo "prompt" >>$OFILE
                        echo "prompt" >>$OFILE
                        echo "prompt PRESS ENTER TO BEGIN THE $SCHEMA SCRIPT SCRIPT EXECUTION">>$OFILE
                        echo "accept abc">>$OFILE
                ;;
                mysql)
                        echo "\! echo" >>$OFILE
                        echo "\! echo" >>$OFILE
                        echo "\! echo 'PRESS ENTER TO BEGIN THE $SCHEMA SCRIPT SCRIPT EXECUTION'">>$OFILE
                        echo "\! read abc">>$OFILE
                ;;
        esac


find $SOURCE_DIR -name "Rejected" -prune -o -print | grep "\-${SCHEMA}\-" | grep -i ${FTYPE} >/tmp/rrrun.txt
DONE="no"
cat /tmp/rrrun.txt | while read LINE
do
        echo "### PROCESSING: $LINE"
        case ${DATABASE} in
                oracle)
                        echo "set echo off" >>$OFILE
                        echo " ">>$OFILE
                ;;
        esac

        cat ${INTERNAL_PATH}/ssasm-header-${DATABASE}.txt >>$OFILE
        case ${DATABASE} in
                oracle)
                        echo "spool /tmp/ss_${SCHEMA}${CTR}.txt">>$OFILE
                ;;
                mysql)
                        echo "tee /tmp/ss_${SCHEMA}${CTR}.txt">>$OFILE
                ;;
        esac
        CTR=$(($CTR+1))

        case ${DATABASE} in
                oracle)
                        echo "prompt ------------------------------------------------------------------------------------------" >>$OFILE
                        echo " ">>$OFILE
                        echo "prompt -- CONTENTS OF $LINE EXECUTING BELOW" >>$OFILE
                        echo " ">>$OFILE
                        echo "prompt  ">>$OFILE
                        echo "prompt  ">>$OFILE
                        echo "prompt  ">>$OFILE
                        echo "prompt  ">>$OFILE
                        echo "prompt  ">>$OFILE
                        echo "set echo on" >>$OFILE
                ;;
                mysql)
                        echo "\! echo ' ------------------------------------------------------------------------------------------'" >>$OFILE
                        echo "\! echo ">>$OFILE
                        echo "\! echo 'CONTENTS OF $LINE EXECUTING BELOW'" >>$OFILE
                        echo " ">>$OFILE
                        echo "\! echo ">>$OFILE
                        echo "\! echo ">>$OFILE
                        echo "\! echo ">>$OFILE
                        echo "\! echo ">>$OFILE
                        echo "\! echo ">>$OFILE
                ;;
        esac

        ## When catting file, make sure to get rid of DOS \r's along the way
        cat $LINE | tr -d '\r' >>$OFILE
        echo " ">>$OFILE

        case ${DATABASE} in
                oracle)
                        echo "spool off">>$OFILE
                ;;
                mysql)
                        echo "notee">>$OFILE
                ;;
        esac

        cat ${INTERNAL_PATH}/ssasm-footer-${DATABASE}.txt >>$OFILE
done

                case ${DATABASE} in
                oracle)
                        echo "prompt  ">>$OFILE
                        echo "prompt  ">>$OFILE
                        echo "prompt  ">>$OFILE
                        echo "prompt  ">>$OFILE
                        echo "prompt  ">>$OFILE
                        echo "prompt -- END OF RELEASE SCRIPT REACHED. CONGRATULATIONS!" >>$OFILE
                ;;
                mysql)
                        echo "\! echo ">>$OFILE
                        echo "\! echo ">>$OFILE
                        echo "\! echo ">>$OFILE
                        echo "\! echo ">>$OFILE
                        echo "\! echo ">>$OFILE
                        echo "\! echo 'END OF RELEASE SCRIPT REACHED. CONGRATULATIONS!'" >>$OFILE
                ;;
        esac



        echo ""
        echo "Script assembly complete. "
        echo "Output saved to: `pwd`/${OFILE}"
fi
