#!/bin/bash
## SQL Script Assembler (SSAsm)
##
## This utility will scan through subdirectories looking for database scripts (fragments) to assemble into a 
## master build script. The master script will be built with appropriate headers for formatting/readability purposes 
## (editable in ssasm-header.txt) and will incorporate:
## 	* The name of script where the fragment originated
##	* Pause points (editable in the ssasm-footer.txt file) between each script fragment for review purposes 
## 	* Spool commmands to output each fragment executed in /tmp/ss_{SCHEMA_NAME}{N}.txt (N starting at 1) for review, etc.
##
## The latest availble version can be found at: https://github.com/cryptoknows/ssasm
##
## ---------------------------------------------------------------------------------------------------------------------
##
## Usage Examples:
##
## ssasm
## ssasm /path/to/source/directories

##
## SSAsm assumes that all changes are organized in directories with the following format:
##
## YYYY-MM-DD-<SCHEMA NAME>-<COMMENTS>
## 
## For example:
##
## 2016-01-02-MY_SCHEMA-			-- No secondary comment added
## 2016-01-05-MY_SCHEMA-Modified_Version 	-- Comments added
##
## NOTES:
## * SSAsm will assemble scripts by folder date and then by alphanumeric sort order of each script *within* the folder
## * SSAsm will *ignore* any directories / scripts placed within a "Rejected" folder (case sensitive)
##
## ---------------------------------------------------------------------------------------------------------------------
##
## Copyright (C) Roby Sherman and other contributors as noted in this section below:
##
## 
## ---------------------------------------------------------------------------------------------------------------------
##
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation; either version 2
## of the License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
##
##

VERSION=1.0.0
CTR=1
INTERNAL_PATH=`dirname $0`

if [ "$1" ] 
then
	SOURCE_DIR="${1}"
else
	SOURCE_DIR="."
fi

## ------------------------------------------------------------------------------------------

echo ""
echo ""
echo "SQL Script Assembler (SSAsm) ${VERSION}"
echo ""
echo "This is a copyrighted utility, distributed under GPL v2 license."
echo "Refer to the SSAsm source directory for more information."
echo ""
echo ""
echo ""
echo -n ">>Enter a schema name to build: "
read SCHEMA
if [ ! ${SCHEMA} ]
then
	echo "*** ERROR! *** You must provide a schema name!"
	exit
fi
echo -n ">>Enter a filetype to integrate (case insensitive): [.sql]: "
read FTYPE
if [ ! ${FTYPE} ]
then
	FTYPE=".sql"
fi
echo ""
echo ""
OFILE="build_${SCHEMA}${FTYPE}"
echo "### GENERATING THE MASTER BUILD SCRIPT \"${OFILE}\" FROM THE FOLLOWING FILES: "
echo ""
find $SOURCE_DIR -name "Rejected" -prune -o -print | grep "\-${SCHEMA}\-" | grep -i ${FTYPE} 
echo ""
echo ""
echo -n ">>Proceed? [N]: "
read READY
if [ "$READY" = "Y" ] || [ "$READY" = "y" ]
then
	tput clear
	echo ""
	echo "### GENERATING..."
	echo "###"
	echo "-- The following script was generated by the SQL Script Assembler (SSAsm) V${VERSION}" >$OFILE
	echo "-- Get your copy today at https://github.com/cryptoknows/ssasm" >>$OFILE
	echo "--">>$OFILE
	echo "--">>$OFILE
	echo "set pagesize 1000" >>$OFILE
	echo "set linesize 132" >>$OFILE
	echo "set echo off" >>$OFILE
	echo "prompt" >>$OFILE
	echo "prompt" >>$OFILE
	echo "prompt PRESS ENTER TO BEGIN THE $SCHEMA SCRIPT SCRIPT EXECUTION">>$OFILE
	echo "accept abc">>$OFILE

find $SOURCE_DIR -name "Rejected" -prune -o -print | grep "\-${SCHEMA}\-" | grep -i ${FTYPE} >/tmp/rrrun.txt
DONE="no"
cat /tmp/rrrun.txt | while read LINE
do
	echo "### PROCESSING: $LINE"
	echo "set echo off" >>$OFILE
	cat ${INTERNAL_PATH}/ssasm-header.txt >>$OFILE
	echo "spool /tmp/ss_${SCHEMA}${CTR}.txt">>$OFILE
	CTR=$(($CTR+1))
	echo "prompt ------------------------------------------------------------------------------------------" >>$OFILE
	echo " ">>$OFILE
	echo "prompt -- CONTENTS OF $LINE EXECUTING BELOW" >>$OFILE
	echo " ">>$OFILE
	echo "prompt  ">>$OFILE
	echo "prompt  ">>$OFILE
	echo "prompt  ">>$OFILE
	echo "prompt  ">>$OFILE
	echo "prompt  ">>$OFILE
	echo "set echo on" >>$OFILE
	## When catting file, make sure to get rid of DOS \r's along the way
	cat $LINE | tr -d '\r' >>$OFILE
	cat ${INTERNAL_PATH}/ssasm-footer.txt >>$OFILE
done
	echo "prompt  ">>$OFILE
	echo "prompt  ">>$OFILE
	echo "prompt  ">>$OFILE
	echo "prompt  ">>$OFILE
	echo "prompt  ">>$OFILE
	echo "prompt -- END OF RELEASE SCRIPT REACHED. CONGRATULATIONS!" >>$OFILE

	echo ""	
	echo "Script assembly complete. "
	echo "Output saved to: `pwd`/${OFILE}"	
fi 

